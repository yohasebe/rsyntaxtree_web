$: << File.join(File.dirname(__FILE__), "lib")

require 'redcarpet'
require 'sinatra'
require 'base64'
require 'rsyntaxtree'
require 'rsyntaxtree_web/version'
require 'securerandom'
require 'json'

$TEMPDIR = File.join(File.dirname(__FILE__), "public/tempfiles")
$RSYNTAXTREE_VER = Gem.loaded_specs["rsyntaxtree"].version.to_s

class CustomRenderer < Redcarpet::Render::HTML
  def image(link, title, alt_text)
    if title =~ /([^=\s]+)=([^=\s]+)/
      %(<a href="#{link}" target="_blank"><img src="#{link}" #{$1}="#{$2}" class=md-img' alt="#{alt_text}" /></a>)
    else
      %(<a href="#{link}" target="_blank"><img src="#{link}" title="#{title}" class='md-img' alt="#{alt_text}" /></a>)
    end
  end

  def table(header, body)
    "<table class='table table-sm table-bordered '>" \
      "<thead>#{header}</thead>" \
      "<tbody>#{body}</tbody>" \
      "</table>"
  end
end

markdown = Redcarpet::Markdown.new(CustomRenderer, autolink: true, fenced_code_blocks: true, :tables => true, :with_toc_data => true)
about_path = File.dirname(__FILE__) + "/about.md"
about_md = File.read(about_path)
ABOUT_HTML = markdown.render(about_md)
document_path = File.dirname(__FILE__) + "/documentation.md"
about_md = File.read(document_path)
DOCUMENT_HTML = markdown.render(about_md)

configure do
  enable :sessions
end

get '/' do
  erb :index
end

post '/check' do
  data = params["data"]
  begin
    result = RSyntaxTree::RSGenerator.check_data(data)
    if result
      {"status" => "success", "message" => "OK"}.to_json
    else
      {"status" => "failure", "message" => "NG"}.to_json
    end
  rescue RSTError => e
    {"status" => "failure", "message" => e.message.gsub("\n", "<br />")}.to_json
  rescue => e
    {"status" => "failure", "message" => "Error: invalid input"}.to_json
  end
end

# make sure the image is generated by really generating it
post '/check_plus' do
  data = params["data"]
  begin
    result = RSyntaxTree::RSGenerator.check_data(data)
    if result
      rs_generator = RSyntaxTree::RSGenerator.new(params)
      tree = rs_generator.draw_tree
    else
     return {"status" => "failure", "message" => "NG"}.to_json
    end

    if tree
      return {"status" => "success", "message" => "OK"}.to_json
    else
      raise
    end

  rescue RSTError => e
    {"status" => "failure", "message" => e.message.gsub("\n", "<br />")}.to_json
  rescue => e
    {"status" => "failure", "message" => "Error: invalid input"}.to_json
  end
end

get '/png/:name' do |name|
  filename = $TEMPDIR + "/" + name + ".png"
  if File.exist?(filename)
    send_file filename, :type => :png
  else
    status 404
  end
end

post '/draw_png' do
  begin
    basename = "syntree.png"
    rs_generator = RSyntaxTree::RSGenerator.new(params)
    png_blob = rs_generator.draw_png
    response.headers['content_type'] = "image/png"
    response.headers['content_length'] = png_blob.size.to_s
    response.headers['content_disposition'] = "inline" + %(; filename="#{basename}")
    {"status" => "success", "png" => Base64.encode64(png_blob)}.to_json
  rescue RSTError => e
    {"status" => "failure", "message" => e.message.gsub("\n", "<br />")}.to_json
  rescue => e
    {"status" => "failure", "message" => "Error: invalid input"}.to_json
  end
end

post '/draw_svg' do
  begin
    basename = "syntree.svg"
    rs_generator = RSyntaxTree::RSGenerator.new(params)
    svg = rs_generator.draw_svg
    response.headers['content_type'] = "image/svg+xml"
    response.headers['content_length'] = svg.size.to_s
    response.headers['content_disposition'] = "inline" + %(; filename="#{basename}")
    {"status" => "success", "svg" => Base64.encode64(svg)}.to_json
  rescue RSTError => e
    {"status" => "failure", "message" => e.message.gsub("\n", "<br />")}.to_json
  rescue => e
    {"status" => "failure", "message" => "Error: invalid input"}.to_json
  end
end

post '/download_svg' do
  begin
    rs_generator = RSyntaxTree::RSGenerator.new(params)
    svg = rs_generator.draw_svg
  rescue
    error 500
  end
  content_type 'image/svg+xml'
  attachment 'syntree.svg'
  svg
end

post '/download_png' do
  begin
    rs_generator = RSyntaxTree::RSGenerator.new(params)
    png = rs_generator.draw_png
  rescue
    error 500
  end
  content_type 'image/png'
  attachment 'syntree.png'
  png
end

sample1 = []
sample1 << "[S"
sample1 << "  [NP ^|R|<>SyntaxTree]"
sample1 << "  [VP"
sample1 << "    [V generates]"
sample1 << "    [NP"
sample1 << "      [Adj #\\+multilingual\\"
sample1 << "            \\+beautiful]"
sample1 << "      [NP syntax\\"
sample1 << "          trees]"
sample1 << "    ]"
sample1 << "  ]"
sample1 << "]"


$SAMPLE1 = sample1.join("\n")
