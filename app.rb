# frozen_string_literal: true

require "redcarpet"
require "sinatra"
require "base64"
require "securerandom"
require "json"
require "rsyntaxtree"

require_relative "lib/rsyntaxtree_web/version"

$RSYNTAXTREE_VER = Gem.loaded_specs["rsyntaxtree"].version.to_s

# Use Google Analytics code only if the code file exists
ga_path = File.dirname(__FILE__) + "/google_analytics_tracking_code"
if File.exist?(ga_path)
  gfile = File.open(ga_path, "r:UTF-8:UTF-8")
  $GOOGLE_CODE = gfile.read
  gfile.close
else
  $GOOGLE_CODE = ""
end

class CustomRenderer < Redcarpet::Render::HTML
  def image(link, title, alt_text)
    if title =~ /([^=\s]+)=([^=\s]+)/
      %(<a href="#{link}" target="_blank"><img src="#{link}" #{$1}="#{$2}" class=md-img' alt="#{alt_text}" /></a>)
    else
      %(<a href="#{link}" target="_blank"><img src="#{link}" title="#{title}" class='md-img' alt="#{alt_text}" /></a>)
    end
  end

  def table(header, body)
    "<table class='table table-sm table-bordered '>" \
      "<thead>#{header}</thead>" \
      "<tbody>#{body}</tbody>" \
      "</table>"
  end
end

markdown = Redcarpet::Markdown.new(CustomRenderer, autolink: true, fenced_code_blocks: true, tables: true, with_toc_data: true)
about_md = File.read(File.dirname(__FILE__) + "/about.md")
ABOUT_HTML = markdown.render(about_md)

about_md_ja = File.read(File.dirname(__FILE__) + "/about_ja.md")
ABOUT_HTML_JA = markdown.render(about_md_ja)

configure do
  enable :sessions
end

# the default / route, whose views are in the '/views' directory
get '/' do
  erb :index
end

# set '/ja' to the Japanese version of the site, whose views are in the '/views/ja' directory
get '/ja' do
  erb :"ja/index", :layout => :"ja/layout"
end

post '/check' do
  data = params["data"]
  begin
    result = RSyntaxTree::RSGenerator.check_data(data)
    if result
      { status: "success", message: "OK" }.to_json
    else
      { status: "failure", message: "NG" }.to_json
    end
  rescue RSTError => e
    { status: "failure", message: e.message.gsub("\n", "<br />") }.to_json
  rescue StandardError
    { status: "failure", message: "Error: invalid input" }.to_json
  end
end

# make sure the image is generated by really generating it
post '/check_plus' do
  data = params["data"]
  begin
    result = RSyntaxTree::RSGenerator.check_data(data)

    return { status: "failure", message: "NG" }.to_json unless result

    rs_generator = RSyntaxTree::RSGenerator.new(params)
    tree = rs_generator.draw_tree
    tree ? { status: "success", message: "OK" }.to_json : raise
  rescue RSTError => e
    { status: "failure", message: e.message.gsub("\n", "<br />") }.to_json
  rescue StandardError
    { status: "failure", message: "Error: invalid input" }.to_json
  end
end

post '/draw_png' do
  basename = "syntree.png"
  rs_generator = RSyntaxTree::RSGenerator.new(params)
  png_blob = rs_generator.draw_png
  response.headers['content_type'] = "image/png"
  response.headers['content_length'] = png_blob.size.to_s
  response.headers['content_disposition'] = "inline" + %(; filename="#{basename}")
  { status: "success", "png" => Base64.encode64(png_blob) }.to_json
rescue RSTError => e
  { status: "failure", message: e.message.gsub("\n", "<br />") }.to_json
rescue StandardError
  { status: "failure", message: "Error: invalid input" }.to_json
end

post '/draw_svg' do
  basename = "syntree.svg"
  rs_generator = RSyntaxTree::RSGenerator.new(params)
  svg = rs_generator.draw_svg
  response.headers['content_type'] = "image/svg+xml"
  response.headers['content_length'] = svg.size.to_s
  response.headers['content_disposition'] = "inline" + %(; filename="#{basename}")
  { status: "success", svg: Base64.encode64(svg) }.to_json
rescue RSTError => e
  { status: "failure", message: e.message.gsub("\n", "<br />") }.to_json
rescue StandardError
  { status: "failure", message: "Error: invalid input" }.to_json
end

post '/download_svg' do
  begin
    rs_generator = RSyntaxTree::RSGenerator.new(params)
    svg = rs_generator.draw_svg
  rescue StandardError
    error 500
  end
  content_type 'image/svg+xml'
  attachment 'syntree.svg'
  svg
end

post '/download_png' do
  begin
    rs_generator = RSyntaxTree::RSGenerator.new(params)
    png = rs_generator.draw_png
  rescue StandardError
    error 500
  end
  content_type 'image/png'
  attachment 'syntree.png'
  png
end

post '/download_pdf' do
  begin
    rs_generator = RSyntaxTree::RSGenerator.new(params)
    pdf = rs_generator.draw_pdf
  rescue StandardError
    error 500
  end
  content_type 'application/pdf'
  attachment 'syntree.pdf'
  pdf
end

sample1 = []
sample1 << "[S"
sample1 << "  [NP |R| SyntaxTree]"
sample1 << "  [VP"
sample1 << "    [V generates]"
sample1 << "    [NP"
sample1 << "      [Adj #\\+multilingual\\"
sample1 << "            \\+beautiful]"
sample1 << "      [NP syntax\\"
sample1 << "          trees]"
sample1 << "    ]"
sample1 << "  ]"
sample1 << "]"

$SAMPLE1 = sample1.join("\n")
